--------------------------------------------------------------
-- instalar o git e demais dependências (mysql, php, apache etc)

# apt-get install git

--------------------------------------------------------------
-- instale o sistema

$ cd /var/www
$ git clone https://github.com/fernao/museusbr.git
$ wget http://ftp.drupal.org/files/projects/drupal-7.26.tar.gz
$ tar zxvf drupal-7.26.tar.gz
$ cp -a drupal-7.26/* museusbr
$ cp drupal-7.26/.htaccess museusbr

--------------------------------------------------------------
-- crie o banco de dados

$ mysql -u root
mysql> CREATE DATABASE museusbr;
mysql> exit

--------------------------------------------------------------
-- crie os arquivos básicos do drupal

$ cd sites/default
$ cp default.settings.php settings.php
$ mkdir files
$ chmod 777 files settings.php

--------------------------------------------------------------
-- rode o instalador e faça a configuração inicial do drupal 
  -> acesse http://localhost/museusbr
  -> preencha os dados do banco
  -> faça a instalacao padrão (standard)

--------------------------------------------------------------
-- suba o banco de dados (nome exemplo)
$ cd /var/www/museusbr
$ mysql -u root museusbr < private/manual/localhost.mysql

--------------------------------------------------------------
-- entre no site
   -> user: admin
   -> senha: admin

-------------------------------- anotações chat -------------

pelo terminal criar na pasta /var/www, ou na sua home, ou em
qualquer outro lugar, uma pasta qualquer. vamos, neste
exemplo, criar uma pasta 'repositorio' na pasta /var/www

este será um repositorio de teste

nesta pasta inicializar o repositorio git

	$ git init

quando uma pasta é inicializada no git, o git cria uma pasta
.git que não pode ser apagada de forma alguma (se não apaga
os metadados do repositorio).
para ver esta pasta .git dar um $ ls -lah

para ver o status usar

	$ git status

o git status mostrará informações como
"new file" / "no changes to be committed"

os arquivos que estiverem na pasta de teste "repositorio"
só entram no status de forem adicionadas (caso contrário
elas aparecerão como "untracked"). para adicionar arquivos
e pastas:

	$ git add [nomedoarquivo]
	$ git add [nomedapasta]

pastas vazias não são listadas pelo "git status"

para comitar:
	
	git commit -m 'primeiro commit'
	git commit . -m 'balblaba'

quando um arquivo da pasta repositório é editado, o
"git status" vai mostrar que há arquivos "modified". para
isso o arquivo tem que ser adicionado ao git "git add"
quando um commit é feito o status muda. sempre olhar o status.

o commit funciona como path, ou seja, há diferenças entre dizer:

	git commit . -m 'meu comentário sobre esse commit'
	git commit pastaAbc -m 'commitando somente conteudo na pastaAbc'

há um outro programa chamado 'tig' [aptitude install tig].
para abrir basta dar

	$ tig

ele lista todos os commits, assim é possível inspecionar o que
foi commitado. para sair é "q" ou "quit"

	$ quit

é necessário configurar um "user" do git: 


	$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com


outro comando. todo arquivo q tiver modified vai dar uma saida
de diff

	$ git diff

	ou

	$ git diff nomedoarquivo
	$ git diff nomedapasta/

o "-" mostram linhas que sairam. "+" mostram linhas que entraram.

documentacao, farta e boa:

	http://www.git-scm.com/doc
	http://www.git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository

usando o github, sequencia básica:

git pull
git commit . -m 'blabla comentário sobre o commit'
git push origin master (origin master é o default, então não precisa escrever)
git push
